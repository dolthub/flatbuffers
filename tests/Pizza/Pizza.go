// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Pizza

import (
	flatbuffers "github.com/dolthub/flatbuffers/v23/go"
)

type PizzaT struct {
	Size int32 `json:"size"`
}

func (t *PizzaT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	PizzaStart(builder)
	PizzaAddSize(builder, t.Size)
	return PizzaEnd(builder)
}

func (rcv *Pizza) UnPackTo(t *PizzaT) error {
	var err error
	t.Size = rcv.Size()
	return err
}

func (rcv *Pizza) UnPack() (*PizzaT, error) {
	if rcv == nil {
		return nil, nil
	}
	t := &PizzaT{}
	err := rcv.UnPackTo(t)
	return t, err
}

type Pizza struct {
	_tab flatbuffers.Table
}

func InitPizzaRoot(o *Pizza, buf []byte, offset flatbuffers.UOffsetT) error {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	return o.Init(buf, n+offset)
}

func TryGetRootAsPizza(buf []byte, offset flatbuffers.UOffsetT) (*Pizza, error) {
	x := &Pizza{}
	return x, InitPizzaRoot(x, buf, offset)
}

func TryGetSizePrefixedRootAsPizza(buf []byte, offset flatbuffers.UOffsetT) (*Pizza, error) {
	x := &Pizza{}
	return x, InitPizzaRoot(x, buf, offset+flatbuffers.SizeUint32)
}

func (rcv *Pizza) Init(buf []byte, i flatbuffers.UOffsetT) error {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
	if PizzaNumFields < rcv.Table().NumFields() {
		return flatbuffers.ErrTableHasUnknownFields
	}
	return nil
}

func (rcv *Pizza) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Pizza) Size() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Pizza) MutateSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

const PizzaNumFields = 1

func PizzaStart(builder *flatbuffers.Builder) {
	builder.StartObject(PizzaNumFields)
}
func PizzaAddSize(builder *flatbuffers.Builder, size int32) {
	builder.PrependInt32Slot(0, size, 0)
}
func PizzaEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
