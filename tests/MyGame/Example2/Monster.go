// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Example2

import (
	flatbuffers "github.com/dolthub/flatbuffers/v23/go"
)

type MonsterT struct {
}

func (t *MonsterT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	MonsterStart(builder)
	return MonsterEnd(builder)
}

func (rcv *Monster) UnPackTo(t *MonsterT) error {
	var err error
	return err
}

func (rcv *Monster) UnPack() (*MonsterT, error) {
	if rcv == nil {
		return nil, nil
	}
	t := &MonsterT{}
	err := rcv.UnPackTo(t)
	return t, err
}

type Monster struct {
	_tab flatbuffers.Table
}

func InitMonsterRoot(o *Monster, buf []byte, offset flatbuffers.UOffsetT) error {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	return o.Init(buf, n+offset)
}

func TryGetRootAsMonster(buf []byte, offset flatbuffers.UOffsetT) (*Monster, error) {
	x := &Monster{}
	return x, InitMonsterRoot(x, buf, offset)
}

func TryGetSizePrefixedRootAsMonster(buf []byte, offset flatbuffers.UOffsetT) (*Monster, error) {
	x := &Monster{}
	return x, InitMonsterRoot(x, buf, offset+flatbuffers.SizeUint32)
}

func (rcv *Monster) Init(buf []byte, i flatbuffers.UOffsetT) error {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
	if MonsterNumFields < rcv.Table().NumFields() {
		return flatbuffers.ErrTableHasUnknownFields
	}
	return nil
}

func (rcv *Monster) Table() flatbuffers.Table {
	return rcv._tab
}

const MonsterNumFields = 0

func MonsterStart(builder *flatbuffers.Builder) {
	builder.StartObject(MonsterNumFields)
}
func MonsterEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
