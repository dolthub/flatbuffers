// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MyGame

import (
	flatbuffers "github.com/dolthub/flatbuffers/v23/go"
)

type InParentNamespaceT struct {
}

func (t *InParentNamespaceT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	InParentNamespaceStart(builder)
	return InParentNamespaceEnd(builder)
}

func (rcv *InParentNamespace) UnPackTo(t *InParentNamespaceT) error {
	var err error
	return err
}

func (rcv *InParentNamespace) UnPack() (*InParentNamespaceT, error) {
	if rcv == nil {
		return nil, nil
	}
	t := &InParentNamespaceT{}
	err := rcv.UnPackTo(t)
	return t, err
}

type InParentNamespace struct {
	_tab flatbuffers.Table
}

func InitInParentNamespaceRoot(o *InParentNamespace, buf []byte, offset flatbuffers.UOffsetT) error {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	return o.Init(buf, n+offset)
}

func TryGetRootAsInParentNamespace(buf []byte, offset flatbuffers.UOffsetT) (*InParentNamespace, error) {
	x := &InParentNamespace{}
	return x, InitInParentNamespaceRoot(x, buf, offset)
}

func TryGetSizePrefixedRootAsInParentNamespace(buf []byte, offset flatbuffers.UOffsetT) (*InParentNamespace, error) {
	x := &InParentNamespace{}
	return x, InitInParentNamespaceRoot(x, buf, offset+flatbuffers.SizeUint32)
}

func (rcv *InParentNamespace) Init(buf []byte, i flatbuffers.UOffsetT) error {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
	if InParentNamespaceNumFields < rcv.Table().NumFields() {
		return flatbuffers.ErrTableHasUnknownFields
	}
	return nil
}

func (rcv *InParentNamespace) Table() flatbuffers.Table {
	return rcv._tab
}

const InParentNamespaceNumFields = 0

func InParentNamespaceStart(builder *flatbuffers.Builder) {
	builder.StartObject(InParentNamespaceNumFields)
}
func InParentNamespaceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
